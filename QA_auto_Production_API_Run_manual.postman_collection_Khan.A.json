{
	"info": {
		"_postman_id": "c816ae6e-a165-4509-b5c9-154c8592b00d",
		"name": "QA_auto_Production_API_Run_manual",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37130274",
		"_collection_link": "https://khananna.postman.co/workspace/Khan_Anna_QA_Technical_Pro~0818e1ae-1777-41dd-948e-a6597f27ce55/collection/37130274-c816ae6e-a165-4509-b5c9-154c8592b00d?action=share&source=collection_link&creator=37130274"
	},
	"item": [
		{
			"name": "registration_user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const names = ['Andriy', 'Olena', 'Serhii', 'Nadia', 'Ivan', 'Iryna'];",
							"const surnames = ['Shevchenko', 'Skywalker', 'Petrenko', 'Bondarenko'];",
							"const domains = ['gmail.com', 'yahoo.com', 'mail.com', 'outlook.com'];",
							"const extraChars = 'abcdefghijklmnopqrstuvwxyz0123456789_';",
							"",
							"// Випадкові елементи",
							"const name = names[Math.floor(Math.random() * names.length)];",
							"const surname = surnames[Math.floor(Math.random() * surnames.length)];",
							"const domain = domains[Math.floor(Math.random() * domains.length)];",
							"",
							"// Додаємо 3 випадкових символи",
							"let randomSuffix = '';",
							"for (let i = 0; i < 3; i++) {",
							"    randomSuffix += extraChars.charAt(Math.floor(Math.random() * extraChars.length));",
							"}",
							"",
							"// Функція для форматування: перша літера велика, решта — малі",
							"function capitalize(str) {",
							"    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();",
							"}",
							"",
							"const formattedName = capitalize(name);",
							"const formattedSurname = capitalize(surname);",
							"",
							"// Формуємо email",
							"const email = `${formattedName}.${formattedSurname}_${randomSuffix}@${domain}`;",
							"",
							"pm.collectionVariables.set(\"generatedEmail\", email);",
							"// console.log(\"Згенерований email:\", email);",
							"",
							"pm.collectionVariables.set(\"name_test\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));",
							"pm.collectionVariables.set(\"lastName_test\", pm.variables.replaceIn(\"{{$randomLastName}}\"));",
							"pm.collectionVariables.set(\"password_test\", pm.variables.replaceIn(\"{{$randomPassword}}\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"// Email перевірка",
							"pm.test(\"Email має валідний формат\", function () {",
							"    const email = pm.collectionVariables.get(\"generatedEmail\");",
							"    //console.log(\"email з колекційної змінної:\", email);",
							"    const re = /^[A-Z][a-z]+\\.[A-Z][a-z]+_[a-z0-9_]{3}@[a-z]+\\.(com|net|org|ua|mail|outlook|yahoo|gmail)$/;",
							"    pm.expect(email).to.match(re);",
							"});",
							"//  Збереження userId",
							"pm.collectionVariables.set(\"userId\", jsonData.data.userId);",
							"",
							"const Ajv = require('ajv');",
							"const ajv = new Ajv({ allErrors: true });",
							"",
							"const schema = {",
							"    type: \"object\",",
							"    required: [\"status\", \"data\"],",
							"    properties: {",
							"        status: { type: \"string\", enum: [\"ok\"] },",
							"        data: {",
							"            type: \"object\",",
							"            required: [\"userId\", \"photoFilename\", \"distanceUnits\", \"currency\"],",
							"            properties: {",
							"                userId: { type: \"number\" },",
							"                photoFilename: { type: \"string\" },",
							"                distanceUnits: { type: \"string\", enum: [\"km\"] },",
							"                currency: { type: \"string\", enum: [\"usd\"] }",
							"            }",
							"        }",
							"    }",
							"};",
							"",
							"const response = pm.response.json();",
							"const validate = ajv.compile(schema);",
							"const valid = validate(response);",
							"",
							"pm.test(\"Відповідь відповідає JSON-схемі (Ajv)\", function () {",
							"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;",
							"});",
							"",
							"",
							"//Перевірки HTTP",
							"pm.test(\"Ststus code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time is less than 2s\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"/* ",
							"// Перевірки JSON",
							"pm.test(\" В полі currency значення: usd \", function () {",
							"    pm.expect(jsonData.data.currency).to.eql(\"usd\");",
							"});",
							"",
							"pm.test(\" В полі distanceUnits значення: km \", function () {",
							"    pm.expect(jsonData.data.distanceUnits).to.eql(\"km\");",
							"});",
							"",
							"pm.test(\"Поле userId існує і воно є числом\", function () {",
							"    pm.expect(typeof jsonData.data.userId).to.eql(\"number\");",
							"});",
							"",
							"pm.test(\"Поле photoFilename містить назву файлу зображення з правильним форматом\", function () {",
							"    pm.expect(jsonData.data.photoFilename).to.match(/\\.(png|jpg|jpeg|gif|webp)$/i);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							" */",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{name_test}}\",\n  \"lastName\": \"{{lastName_test}}\",\n  \"email\": \"{{generatedEmail}}\",\n  \"password\": \"{{password_test}}\",\n  \"repeatPassword\": \"{{password_test}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/auth/signup",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"auth",
						"signup"
					]
				},
				"description": "Generated from cURL: curl -X 'POST' \\\n  'https://qauto.forstudy.space/api/auth/signup' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Anna\",\n  \"lastName\": \"Khan\",\n  \"email\": \"test@test.com\",\n  \"password\": \"Qwerty12345\",\n  \"repeatPassword\": \"Qwerty12345\"\n}'"
			},
			"response": []
		},
		{
			"name": "logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\" Поле status має значення ОК\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"ok\");",
							"});",
							"",
							"pm.test(\"Ststus code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 2s\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_URL}}/auth/logout",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"auth",
						"logout"
					]
				},
				"description": "Generated from cURL: curl -X 'GET' \\\n  'https://qauto.forstudy.space/api/auth/logout' \\\n  -H 'accept: application/json'"
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"const Ajv = require('ajv');",
							"const ajv = new Ajv({ allErrors: true });",
							"",
							"const schema = {",
							"    type: \"object\",",
							"    required: [\"status\", \"data\"],",
							"    properties: {",
							"        status: { type: \"string\", enum: [\"ok\"] },",
							"        data: {",
							"            type: \"object\",",
							"            required: [\"userId\", \"photoFilename\", \"distanceUnits\", \"currency\"],",
							"            properties: {",
							"                userId: { type: \"number\" },",
							"                photoFilename: { type: \"string\" },",
							"                distanceUnits: { type: \"string\", enum: [\"km\"] },",
							"                currency: { type: \"string\", enum: [\"usd\"] }",
							"            }",
							"        }",
							"    }",
							"};",
							"",
							"const response = pm.response.json();",
							"const validate = ajv.compile(schema);",
							"const valid = validate(response);",
							"",
							"pm.test(\"Відповідь відповідає JSON-схемі (Ajv)\", function () {",
							"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Ststus code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 2s\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{generatedEmail}}\",\n  \"password\": \"{{password_test}}\",\n  \"remember\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/auth/signin",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"auth",
						"signin"
					]
				},
				"description": "Generated from cURL: curl -X 'POST' \\\n  'https://qauto.forstudy.space/api/auth/signin' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"email\": \"test@test.com\",\n  \"password\": \"Qwerty12345\",\n  \"remember\": false\n}'"
			},
			"response": []
		},
		{
			"name": "creates_new_car",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Випадковий carBrandId (1–5)",
							"const carBrandId = Math.floor(Math.random() * 5) + 1;",
							"",
							"// Логіка відповідності carModelId до carBrandId",
							"let carModelIdRange = [];",
							"switch (carBrandId) {",
							"    case 1:",
							"        carModelIdRange = [1, 5];",
							"        break;",
							"    case 2:",
							"        carModelIdRange = [6, 10];",
							"        break;",
							"    case 3:",
							"        carModelIdRange = [11, 15];",
							"        break;",
							"    case 4:",
							"        carModelIdRange = [16, 18];",
							"        break;",
							"    case 5:",
							"        carModelIdRange = [19, 23];",
							"        break;",
							"}",
							"",
							"// Генеруємо carModelId в межах діапазону",
							"const carModelId = Math.floor(Math.random() * (carModelIdRange[1] - carModelIdRange[0] + 1)) + carModelIdRange[0];",
							"",
							"// Генеруємо mileage дозволено 0–999999",
							"const mileage = Math.floor(Math.random() * 1000);",
							"",
							"// Зберігаємо значення у змінні колекції",
							"pm.collectionVariables.set(\"carBrandId\", carBrandId);",
							"pm.collectionVariables.set(\"carModelId\", carModelId);",
							"pm.collectionVariables.set(\"mileage\", mileage);",
							"",
							"//console.log(\"carBrandId:\", carBrandId);",
							"//console.log(\"carModelId:\", carModelId);",
							"//console.log(\"mileage:\", mileage);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"//console.log (\"carId\", jsonData.data.id);",
							"pm.collectionVariables.set(\"carId\" , jsonData.data.id)",
							"pm.collectionVariables.set(\"carCreatedAt\",jsonData.data.carCreatedAt);",
							"",
							"pm.test(\"Поле model є текстом\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(typeof jsonData.data.model).to.eql(\"string\");",
							"});",
							"",
							"pm.test(\"Поле brand є текстом\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(typeof jsonData.data.brand).to.eql(\"string\");",
							"});",
							"",
							"pm.test(\"Поле logo є текстом\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(typeof jsonData.data.logo).to.eql(\"string\");",
							"});",
							"",
							"pm.test(\"Поле carBrandId є числом\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(typeof jsonData.data.carBrandId).to.eql(\"number\");",
							"});",
							"",
							"pm.test(\"Поле carModelId є числом\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(typeof jsonData.data.carModelId).to.eql(\"number\");",
							"});",
							"",
							"pm.test(\"Поле initialMileage є числом\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(typeof jsonData.data.initialMileage).to.eql(\"number\");",
							"});",
							"",
							"pm.test(\"Поле mileage є числом\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(typeof jsonData.data.mileage).to.eql(\"number\");",
							"});",
							"",
							"",
							"pm.test(\"Ststus code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 2s\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"carBrandId\": {{carBrandId}},\n  \"carModelId\": {{carModelId}},\n  \"mileage\": {{mileage}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_URL}}/cars",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"cars"
					]
				},
				"description": "Generated from cURL: curl -X 'POST' \\\n  'https://qauto.forstudy.space/api/cars' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"carBrandId\": 1,\n  \"carModelId\": 1,\n  \"mileage\": 122\n}'"
			},
			"response": []
		},
		{
			"name": "delete_users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\" Поле status має значення ОК\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"ok\");",
							"});",
							"",
							"pm.test(\"Ststus code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response time is less than 2s\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_URL}}/users",
					"host": [
						"{{base_URL}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Generated from cURL: curl -X 'DELETE' \\\n  'https://qauto.forstudy.space/api/users' \\\n  -H 'accept: application/json'"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name_test",
			"value": "Isai"
		},
		{
			"key": "lastName_test",
			"value": "Okuneva"
		},
		{
			"key": "password_test",
			"value": "Wa581GyuEDtklPd"
		},
		{
			"key": "country_test",
			"value": "France"
		},
		{
			"key": "dateBirth_test",
			"value": "Fri Jun 28 2024 22:57:29 GMT+0300 (Eastern European Summer Time)"
		},
		{
			"key": "photo_test",
			"value": "user-8752918436582.jpg",
			"type": "string"
		},
		{
			"key": "old_password_test",
			"value": "iFiGctU5ArarCVR"
		},
		{
			"key": "carBrandId",
			"value": 3
		},
		{
			"key": "carModelId",
			"value": 14
		},
		{
			"key": "mileage",
			"value": 462
		},
		{
			"key": "carId",
			"value": 349852
		},
		{
			"key": "carCreatedAt",
			"value": "2025-05-22T18:23:04.282Z"
		},
		{
			"key": "reportedAt",
			"value": "2025-05-20T09:34:49.998Z"
		},
		{
			"key": "userId",
			"value": 221716
		},
		{
			"key": "liters",
			"value": 384
		},
		{
			"key": "totalCost",
			"value": 136
		},
		{
			"key": "generatedEmail",
			"value": "Iryna.Petrenko_bi0@mail.com"
		}
	]
}